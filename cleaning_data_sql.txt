FIlling numbers with leading zeros - using REPLICATE and LEN
REPLICATE(string, integer)   - repeats a string a certain number of times
REPLICATE('0', 9 - LEN(registration_code))
SQL statement to concatenate with leading zeros:

SELECT  REPLICATE('0', 9 - LEN(registration_code)) + registration_code AS registration_code
FROM flight_statistics

OR if your SQL is newer than SQL Server 2012, use CONCAT:

SELECT CONCAT(REPLICATE('0', 9 - LEN(registration_code)) + registration_code AS registration_code)
FROM flight_statistics

OR you can use FORMAT function (since SQL Server 2012)

SELECT FORMAT(CAST(registration_code AS INT), '000000000') AS registration_code
FROM flight_statistics;

Exercises:

SELECT 
	-- Concat the strings
	CONCAT(
		carrier_code, 
		' - ', 
      	-- Replicate zeros
		REPLICATE('0', 9 - LEN(registration_code)), 
		registration_code, 
		', ', 
		airport_code)
	AS registration_code
FROM flight_statistics
-- Filter registers with more than 100 delays
WHERE delayed > 100

SELECT 
    -- Concat the strings
	CONCAT(
		carrier_code, 
		' - ', 
        -- Format the code
		FORMAT(CAST(registration_code AS INT), '0000000'),
		', ', 
		airport_code
	) AS registration_code
FROM flight_statistics
-- Filter registers with more than 100 delays
WHERE delayed > 100

Cleaning messy strings
Removing additional spaces using TRIM
Available since SQL Server 2017
TRIM removes any specified character from start and end of string
Removes space if we don't specify a character
SELECT code, TRIM(name) AS name FROM carriers

For older versions, you can use RTRIM(trailing spaces) and LTRIM(leading spaces)
Can combine

SELECT code LTRIM(RTRIM(name)) AS name FROM carriers

Unifying strings
If state is displayed differently, use Replicate
replaces all occurences of a specified string with another string
REPLACE(string_to_replace, occurences, string_replacement)
case insensitive by default
Problem: dataset has 'Florida', 'fl', and 'FL' for state

SELECT airport_code, airport_name, airport_city,
    REPLACE(airport_state, 'FL', 'Florida'),
    'Floridaorida', 'Florida') AS airport_state
FROM airports 
ORDER BY airport_state

OR you can use a case statement:
SELECT airport_code, airport_name, airport_city,
    CASE 
        WHEN airport_state <> 'Florida' THEN REPLACE(airport_state, 'FL', 'Florida')
        ELSE airport_state
    END AS airport_state
FROM airports 
ORDER BY airport_state

To replace with "FL" string (need REPLACE and UPPPER):
SELECT airport_code, airport_name, airport_city,
    UPPER(
        REPLACE(airport_state, 'Florida', 'FL')
     ) AS airport_state
FROM airports 
ORDER BY airport_state

Exercises:
SELECT 
	airport_code,
	-- Use the appropriate function to remove the extra spaces
    TRIM(airport_name) AS airport_name,
	airport_city,
    airport_state
-- Select the source table
FROM airports 

SELECT 
	airport_code,
	-- Use the appropriate function to remove the extra spaces
    LTRIM(RTRIM(airport_name)) AS airport_name,
	airport_city,
    airport_state
-- Select the source table
FROM airports 

SELECT 
	airport_code,
	airport_name,
    -- Use the appropriate function to unify the values
    REPLACE(airport_city, 'ch', 'Chicago') AS airport_city,
	airport_state
FROM airports  
WHERE airport_code IN ('ORD', 'MDW')

SELECT airport_code, airport_name, 
	-- Use the CASE statement
	CASE
    	-- Unify the values
		WHEN airport_city <> 'Chicago' THEN REPLACE(airport_city, 'ch', 'Chicago')
		ELSE airport_city 
	END AS airport_city,
    airport_state
FROM airports
WHERE airport_code IN ('ORD', 'MDW')

SELECT 
	airport_code, airport_name,
    	-- Convert to uppercase
    	UPPER(
            -- Replace 'Chicago' with 'ch'.
          	REPLACE(airport_city, 'Chicago', 'ch')
        ) AS airport_city,
    airport_state
FROM airports
WHERE airport_code IN ('ORD', 'MDW')

Comparing similarity between strings
SOUNDEX DIFFERENCE functions
SOUNDEX - phonetic algorithm - returns four character code to evaluate similarity between strings based on pronunciation
Exceptions - need to be careful because some words may return same code, but are different

SELECT DISTINCT A1.airport_state
FROM airports A1
INNER JOIN airports A2 
    ON SOUNDEX(A1.airport_state) = SOUNDEX(A2.airport_state)
    AND A1.airport_state <> A2.airport_state

this doesn't work correctly - only checks the first words, so we need to omit spaces:
SELECT DISTINCT A1.airport_state
FROM airports A1
INNER JOIN airports A2 
    ON SOUNDEX(REPLACE(A1.airport_state, ' ', '')) = SOUNDEX(REPLACE(A2.airport_state, ' ', ''))
    AND A1.airport_state <> A2.airport_state

DIFFERENCE
compares two SOUNDEX values and returns a value from 0 to 4
0 = little or no similarity
4 = high similarity

SELECT DISTINCT A1.airport_state
FROM airports A1
INNER JOIN airports A2 
    ON DIFFERENCE(REPLACE(A1.airport_state, ' ', ''), REPLACE(A2.airport_state, ' ', '')) = 4
    AND A1.airport_state <> A2.airport_state

SELECT 
    -- First name and surname of the statisticians
	DISTINCT S1.statistician_name, S1.statistician_surname
-- Join flight_statistics with itself
FROM flight_statistics S1 INNER JOIN flight_statistics S2 
	-- The SOUNDEX result of the first name and surname have to be the same
	ON SOUNDEX(S1.statistician_name) = SOUNDEX(S2.statistician_name) 
	AND SOUNDEX(S1.statistician_surname) = SOUNDEX(S2.statistician_surname) 
-- The texts of the first name or the texts of the surname have to be different
WHERE S1.statistician_name <> S2.statistician_name
	OR S1.statistician_surname <> S2.statistician_surname

SELECT 
    -- First name and surnames of the statisticians
	DISTINCT S1.statistician_name, S1.statistician_surname
-- Join flight_statistics with itself
FROM flight_statistics S1 INNER JOIN flight_statistics S2 
	-- The DIFFERENCE of the first name and surname has to be equals to 4
	ON DIFFERENCE(S1.statistician_name, S2.statistician_name) = 4
	AND DIFFERENCE(S1.statistician_surname, S2.statistician_surname) = 4
-- The texts of the first name or the texts of the surname have to be different
WHERE S1.statistician_name <> S2.statistician_name
	OR S1.statistician_surname <> S2.statistician_surname

Missing data
Missing values are represented as NULL but can also be blank

Using IS NOT  NULL to remove NULL
SELECT * FROM airports
WHERE airport_state IS NOT NULL

To remove missing values (blank)
SELECT * FROM airports 
WHERE airport_state <> ''

To substitute NULL values with specific values:
SELECT airport_code, airport_name, airport_city ISNULL(airport_state, 'Unknown') AS airport_state
FROM airports 

TO substitute a value (AVG):
SELECT registration_code, airport_code, carrier_code
ISNULL(canceled, (SELECT AVG(canceled) FROM flight_statistics)) AS canceled_fixed
FROM flight_statistics
GROUP BY registration_code, airport_code, carrier_code, canceled

TO fill with another value - COALESCE
SELECT airport_code, airport_city, airport_state, 
    COALESCE (airport_state, airport_city, 'Unknown') AS airport_state_fixed
FROM airports

Exercises:

SELECT *
-- Select the appropriate table
FROM airports
-- Exclude the rows where airport_city is NULL
WHERE airport_city IS NOT NULL

SELECT *
-- Select the appropriate table
FROM airports
-- Return only the rows where airport_city is NULL
WHERE airport_city IS NULL

SELECT *
-- Select the appropriate table
FROM airports
-- Exclude the rows where airport_city is missing
WHERE airport_city <> ''

SELECT *
-- Select the appropriate table
FROM airports
-- Return only the rows where airport_city is missing
WHERE airport_city = ''

SELECT
  airport_code,
  airport_name,
  -- Replace missing values for airport_city with 'Unknown'
  ISNULL(airport_city, 'Unknown') AS airport_city,
  -- Replace missing values for airport_state with 'Unknown'
  ISNULL(airport_state, 'Unknown') AS airport_state
FROM airports

SELECT
airport_code,
airport_name,
-- Replace the missing values
COALESCE(airport_city, airport_state, 'Unknown') AS location
FROM airports

Avoiding duplicate data
Need to detect duplicate data with ROW_NUMBER()
SELECT *
    ROW_NUMBER() OVER (
        PARTITION BY airport_code, carrier_code, registration_date
        ORDER BY airport_code, carrier_code, registration_date
    ) row_num 
FROM flight_statistics

To get duplicate rows: row_num > 1
To exclude duplicate rows: row_num = 1

TO get only duplicate rows:
WITH cte AS (
    SELECT *,
        ROW_NUMBER() OVER (
            PARTITION BY airport_code, carrier_code, registration_date
            ORDER BY airport_code, carrier_code, registration_date
        ) row_num 
    FROM flight_statistics
)
SELECT * FROM cte
WHERE row_num > 1;

To exclude duplicate rows: (just change last line to row_num = 1)

Exercises:

SELECT *,
	   -- Apply ROW_NUMBER()
       ROW_NUMBER() OVER (
         	-- Write the partition
            PARTITION BY 
                airport_code, 
                carrier_code, 
                registration_date
			ORDER BY 
                airport_code, 
                carrier_code, 
                registration_date
        ) row_num
FROM flight_statistics

-- Use the WITH clause
WITH cte AS (
    SELECT *, 
        ROW_NUMBER() OVER (
            PARTITION BY 
                airport_code, 
                carrier_code, 
                registration_date
			ORDER BY 
                airport_code, 
                carrier_code, 
                registration_date
        ) row_num
    FROM flight_statistics
)
SELECT * FROM cte
-- Get only duplicates
WHERE row_num > 1;

WITH cte AS (
    SELECT *, 
        ROW_NUMBER() OVER (
            PARTITION BY 
                airport_code, 
                carrier_code, 
                registration_date
			ORDER BY 
                airport_code, 
                carrier_code, 
                registration_date
        ) row_num
    FROM flight_statistics
)
SELECT * FROM cte
-- Exclude duplicates
WHERE row_num = 1;

Dealing with different date formats
US English (month/day/year)
04/15/2008
Spanish (day/month/year)
15/04/2008

To format dates use CONVERT or FORMAT
SELECT
    CONVERT(VARCHAR(11), CAST(entry_date AS DATE), 0) AS '0'
    CONVERT(VARCHAR(10), CAST(entry_date AS DATE), 1) AS '1'
    ...
FROM pilots

FORMAT is more flexible than CONVERT, but slower, so not great for high data volumes
SELECT FORMAT (CAST(entry_date AS DATE), 'd', 'en-US' ) AS 'US English Result',
    FORMAT (CAST(entry_date AS DATE), 'd', 'de-de') AS 'German Result',
    ...
FROM pilots
'D' for long dates, 'd' short dates, 'dd/MM/yyyy' for datetimes

Exercises:
SELECT 
    airport_code,
    carrier_code,
    canceled,
    -- Convert the registration_date to a DATE and print it in mm/dd/yyyy format
    CONVERT(VARCHAR(10), CAST(registration_date AS DATE), 101) AS registration_date
FROM flight_statistics 
-- Convert the registration_date to mm/dd/yyyy format
WHERE CONVERT(VARCHAR(10), CAST(registration_date AS DATE), 101) 
	-- Filter the first six months of 2014 in mm/dd/yyyy format 
	BETWEEN '01/01/2014' AND '06/30/2014'

SELECT 
	pilot_code,
	pilot_name,
	pilot_surname,
	carrier_code,
    -- Convert the entry_date to a DATE and print it in dd/MM/yyyy format
	FORMAT(CAST(entry_date AS DATE), 'dd/MM/yyyy') AS entry_date
from pilots

