Bash scripting
Allows you to save and execute multiple commands
Some commands to know:
(e)grep - filters input based on regex pattern matching
cat - concatenates file contents line by line
tail / head - gives the first or last lines -n (number)
wc - word count -w line count -l
sed - string replacement using regex pattern matching
Use regex101.com to test regex expressions
grep ‘p’ fruits.txt
[] - make a set like ‘[un]’ (look for these letters) - would return anything with a u or n inside
^ - makes an inverse set (not these letters)
| - pipe - lets you run multiple commands sequentially
sort | uniq -c
Sort - sorts alphabetically (or numerically)
Uniq - does a distinct count
If we wanted the top n fruits:
cat new_fruits.txt | sort | uniq -c | head -n 3

cat two_cities.txt | egrep ‘Sydney Carton|Charles Darnay’ | wc -l


Bash script anatomy:
#!  (she bang or hash bang) usually begins with this on its own line
usually followed by /usr/bash like this: #!/usr/bash
command which bash will tell you the path to your bash if its not in usr/bash
file extension for bash scripts : .sh
to run: bash script_name.sh
if you have #! as the first line then you can just run it with: ./script_name.sh
Example: (saved as eg.sh)
#!/usr/bash
echo "Hello world"
echo "Goodbye"

Each line of code can be a shell command and you can chain them together with pipes
Example:
#!/usr/bash
cat animals.txt | cut -d " " -f 2 | sort | uniq -c

Exercise:
#!/bin/bash

# Create a single-line pipe
# Cuts the relavant field (-f) with the delimter (-d ",")
# tail -n +2 just keeps the headers from being aggregated, then sorts and counts the unique items
cat soccer_scores.csv | cut -d "," -f 2 | tail -n +2 | sort | uniq -c


#!/bin/bash

# Create a sed pipe to a new file (replaces string with new string)
cat soccer_scores.csv | sed 's/Cherno/Cherno City/g' | sed 's/Arda/Arda United/g' > soccer_scores_edited.csv

Standard Streams
STDIN - standard input (a stream of data into the program)
STDOUT - standard output (stream going out)
STDERR - standard error (errors in your program)
not always clear as they tend to all appear in the terminal
cat animals.txt | cut -d " " -f 2 | sort | uniq -c
stdout of cat becomes stdin of cut, which becomes the stdout for the sort, etc.
when pipe finishes, the last stdout gets printed in termal (the count from uniq)
cat sports.txt 1> new_sports.txt  (takes data from file and writes stdout to a new file)

Arguments
bash can take arguments to be used inside by adding a sapce after the script execution call
ARGV - array of all the arguments given to the program
$ - each argument can be accessed with $    $1 (first argument) $2 (second argument)
$@ $* give all the arguments in ARGV
$# gives the length (number) of arguments
#!/usr/bash
echo $1     (prints first argument)
echo $2     (prints second argument)
echo $@     (prints all the arguments)
echo "There are " $# "arguments"    (prints number of arguments)


# Echo the first ARGV argument
echo $1

# Cat all the files
# Then pipe to grep using the first ARGV argument
# Then write out to a named csv using the first ARGV argument
cat hire_data/* | grep "$1" > "$1".csv

Variables
assign notation =
var1="Moon"
variables can be referenced with $ notation ($ is necessary for bash to realize it's a variable)
echo $var1
Beware of adding spaces around the = 
"" '' can mean difference things when creating variables and printing
''  interpreted literally
""  interpreted literally EXCEPT using $ and ```
``` creates and shell within a shell - sends whatever is between `` out to a new shell and takes the results
    back into the variable
now_var='NOW'
now_var_doublequote="$now_var"      would return $now_var if you put '' here instead of ""
echo $now_var_doublequote
this returns NOW

Date 
date  -returns current date and time returned as a string
rightnow_doublequote="The date is `date`."
echo $rightnow_doublequote
this works correctly becuase of backticks 

Another way to do this is with ()$ notation
rightnow_parentheses="The date is $(date)."
echo $rightnow_parentheses

`` ia the older way of doing things, so good for backward compatibility, but ()$ is the more modern way

Exercises:
# Create the required variable
yourname="Sam"

# Print out the assigned name (Help fix this error!)
echo "Hi there "$yourname", welcome to the website!"

Numbers in Bash
Cannot natively do arithmetic in shell (like you can in R or Python)
expr utility program that lets you do numeric calculations
expr 1 + 4
BUT, it cannot handle decimal places
bc (basic calculator) - opens a calculator so that you can enter 5+7 and when you are done enter quit
To use bc without having to open the calculator:
Echo “7 + 7.5” | bc
Scale argument - lets you specify how many decimal places
Echo “scale=3; 10 / 3 “ | bc
Need to use ; 
Do not use spaces around the equals sign if you assign numbers to a variable
dog_name=‘Roger’
dog_age=6
Echo “My dog’s name is $dog_name and he is $dog_age years old.”
Could also use (()) notation instead of expr or bc
echo $((5 + 7)) this uses expr under the hood, so no decimals
Shell within a shell is very useful for calculations
model1=87.65
model2=89.20
echo “The total score is $(echo “$model1 + $model2” | bc)”
Echo “The average score is $(echo “($model1 + $model2) / 2 | bc)”

Exercises:
# Get first ARGV into variable
temp_f=$1

# Subtract 32
temp_f2=$(echo "scale=2; $temp_f - 32" | bc)

# Multiply by 5/9 and print
temp_c=$(echo "scale=2; $temp_f2 * 5 / 9" | bc)

# Print the celsius temp
echo $temp_c 

when calling it: bash script.sh 108

# Create three variables from the temp data files' contents
temp_a=$(cat temps/region_A)
temp_b=$(cat temps/region_B)
temp_c=$(cat temps/region_C)

# Print out the three variables
echo "The three temperatures were $temp_a, $temp_b, and $temp_c"

Arrays
numberical uindexed structure (lists in python, vectors in R)
To construct an array without any elements
    declare -a my_first_array
To construct one with elements:
    my_first_array=(1 2 3)
    no commas to separate, and no spaces around =
To return all array elements, index into array with @
    echo ${my_array[@]}         need {} around array name and [] @ for elements
The length of array is returned by adding the # symbol at fron of call to array:
    echo ${#array[@]}
Access elements using [] - zero indexed
    echo ${my_array[2]}
To change elements by their index:
    my_array[0]=999 - don't use the $ notation for overwriting a single element
    echo ${my_array[0]} - to see if it worked
Slicing:
    array[@]:N:M    N is the starting index M is is how many elements to return
    echo ${my_array[@]:3:2}     start at the fourth element and return 2 elements
Appending to arrays:
    my_array+=(10)  adds the number 10 to the end of the array    
    If you forget the () it just concatenates 10 on the end of the first element

Associative arrays:  - uses key value pairs not numerical indexes (like a python dictionary)
To declare without adding elements:
declare -A city_details
city_details=([city_name]=“New York” [population]=1400000)
To declare and add elements at same time:
declare -A city_details=([city_name]=“New York” [population]=1400000)
To index using a key to return a value:
echo ${city_details[city_name]}
To return all the keys:
Echo ${!city_details[@]} 

If statements:
If [ condition ]; then some code 
else some other code
fi (which means finish)
Two tips:
You need spaces between [] and conditional elements inside
You need the semicolon after the ]
x=“Queen”
if [ $x == “king” ]; then
echo “$x is a King!”
else
echo “$x is not a King!”
fi 
!= means not equal
Can use (()) instead of [] for numerical statements
x=10
if ((#x > 5)); then
echo “$x is more than 5!”
fi
Can use special flags for numbers
-eq equal to
-ne not equal to
-lt less than
-le less than or equal to
-gt greater than
-ge greater than or equal to

x=10
if [ $x -gt 5 ]; then
echo “$x is more than 5!”
fi

File related conditional flags: (there are many others)
-e if the file exists
-s if the files exists and size is greater than zero
-r if the file exists and is readable
-w if the file exists and is writeable

&& AND 
|| OR

To chain it:
x=10
if [ $x -gt 5 ] && [ $x -lt 11]; then
echo “$x is more than 5 and less than 11!”
fi
Or use [[]] notation:
x=10
if [[ $x -gt 5 && $x -lt 11 ]]; then
echo “$x is more than 5 and less than 11!”
fi

To construct a conditional using cl programs like grep:
if grep -q Hello words.txt; then
echo “Hellos is inside!”
fi

Using shell within a shell:
if $(grep -q Hello words.txt); then
echo “Hello is inside!”
fi


# Extract Accuracy from first ARGV element
accuracy=$(grep "Accuracy" $1 | sed 's/.* //')

# Conditionally move into good_models folder
if [ $accuracy -gt 90 ]; then
    mv $1 good_models/
fi

# Conditionally move into bad_models folder
if [ $accuracy -lt 90 ]; then
    mv $1 bad_models/
fi

# Create variable from first ARGV element
sfile=$1

# Create an IF statement on sfile's contents
if grep -q 'SRVM_' $sfile && grep -q 'vpt' $sfile ; then
# Move file if matched
mv $sfile good_logs/
fi

FOR loops in bash
for x in 1 2 3
do
echo $x
done 

Brace expansion lets you crate a numeric range {}
{Start..stop..increment} increment defaults to 1 if not specified
For x in {1..5..2} starts at 1, finishes at 5 and increments by 2

Three expression syntax (for numerical loops)
for ((x=2;x<=4;x+=2))  
do
echo $x
done

x=2 (start expression) x<=4 (terminating condition) x+=2 (how to increment or decrement through the loop)
To create iterables in place with glob expressions:
for book in books/*
do
echo $book
done

Will automatically create an array to iterate over and print out the file name

To call a shell within a shell:
for book in $(ls books/ | grep -I ‘air’)
do
echo $book
done

WHILE loops
Can use same comparisons from if statements (like -le)
Can use chaining with && ||
x=1
while [ $x -le 3 ];
do
echo $x
((x+=1))
done

Beware infinite loops

Exercise:
# Use a FOR loop on files in directory
for file in inherited_folder/*.R
do  
    # Echo out each file
    echo $file
done

# Create a FOR statement on files in directory
for file in robs_files/*.py
do  
    # Create IF statement using grep
    if grep -q 'RandomForestClassifier' $file ; then
        # Move wanted files to to_keep/ folder
        mv $file to_keep/
    fi
done

Case statement
Create clear and more efficient code when if statements would be nested
Could use shell within a shell

case ‘something’ in -selects variable to string to match against
pattern1)
command1;;
pattern2)
command2;;
*)
default command;;
esac (case spelled backwards)

Can use regex for pattern matching
Air* everything starting with Air
*hat* everything that contains hat

Example:
case $(cat $1) in
*sydney*)
mv $1 sydney/ ;;
‘melbourne&|*brisbane*)
rm $1 ;;
*canberra*)
mv $1 “IMPORTANT_$1” ;;
*)
echo “No cities found” ;;
esac

Exercise:
# Create a CASE statement matching the first ARGV element
case $1 in
  # Match on all weekdays
  Monday|Tuesday|Wednesday|Thursday|Friday)
  echo "It is a Weekday!";;
  # Match on all weekend days
  Saturday|Sunday)
  echo "It is a Weekend!";;
  # Create a default
  *) 
  echo "Not a day!"
esac

# Use a FOR loop for each file in 'model_out/'
for file in model_out/*
do
    # Create a CASE statement for each file's contents
    case $(cat $file) in
      # Match on tree and non-tree models
      *"Random Forest"*|*GBM*|*XGBoost*)
      mv $file tree_models/ ;;
      *KNN*|*Logistic*)
      rm $file ;;
      # Create a default
      *) 
      echo "Unknown model in FILE" ;;
    esac
done

Basic Functions
Syntax:
function_name () {
    #code
    return #something
}

Alternate syntax:
function function_name {
    #code   
    return #something
}
to call:
function_name

F to C:
temp_f=30
function convert_temp() {
    temp_c=$(echo "scale=2; ($temp_f -32) * 5 /9" | bc)
    echo $temp_c
}


# Create function
function upload_to_cloud () {
  # Loop through files with glob expansion
  for file in output_dir/*results*
  do
    # Echo that they are being uploaded
    echo "Uploading $file to cloud"
  done
}

# Call the function
upload_to_cloud

# Create function
what_day_is_it () {

  # Parse the results of date
  current_day=$(date | cut -d " " -f1)

  # Echo the result
  echo $current_day
}

# Call the function
what_day_is_it

Can use ARGV notation to access arguments
$1 $2 (for 1st and second)
$@ and $* give all the arguments
$# gives the number of arguments

Passing arguments
function print_filename {
    echo "THe first file was $1"
    for file in $@
    do
        echo "This file has name $file"
    done
}
print_filename "LOTR.txt" "mod.txt" "A.py"

Scope
Global - accessible anywhere
Local - only accessible in certain parts of program
In Bash, all variables are global by default
TO restrict scope:
function name {
    local first_name=$1
}

If you try to print first_name outside of scope, you won't get an error, you get a 
blank line. Because it was run with no arguments, it defaults to a blank element.

Return values:
return option is only meant to determine if function was a success, not to get data out.
Can assign what we want to return to a global variable
Can echo what we want back (last line in function) and capture using shell within a shell

Return error:
function function_2 {
    echlo
}
function_2
echo $?     prints the error message

Using shell within a shell:
function convert_temp {
    echo $(echo "scale=2; ($1 -32) * 5 / 9" | bc)
}
converted=$(convert_temp 30)
echo "30F in celsius is $converted C"


# Create a function 
function return_percentage () {

  # Calculate the percentage using bc
  percent=$(echo "scale=2; 100 * $1 / $2" | bc)

  # Return the calculated percentage
  echo $percent
}

# Call the function with 456 and 632 and echo the result
return_test=$(return_percentage 456 632)
echo "456 out of 632 as a percent is $return_test%"

# Create a function
function get_number_wins () {

  # Filter aggregate results by argument
  win_stats=$(cat soccer_scores.csv | cut -d "," -f2 | egrep -v 'Winner'| sort | uniq -c | egrep "$1")

}

# Call the function with specified argument
get_number_wins "Etar"

# Print out the global variable
echo "The aggregated stats are: $win_stats"

# Create a function with a local base variable
function sum_array () {
  local sum=0
  # Loop through, adding to base variable
  for number in "$@"
  do
    sum=$(echo "$sum + $number" | bc)
  done
  # Echo back the result
  echo $sum
  }
# Call function with array
test_array=(14 12 23.5 16 19.34)
total=$(sum_array "${test_array[@]}")
echo "The total sum of the test array is $total"

